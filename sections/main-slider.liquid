{% schema %}
{
  "name": "t:sections.main_slider.name",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "select",
      "id": "layout_style",
      "label": "Layout style",
      "options": [
        { "value": "default", "label": "Default" },
        { "value": "style-2", "label": "Style 2" }
      ],
      "default": "default"
    },
    {
      "type": "select",
      "id": "width",
      "label": "t:sections.main_slider.settings.width.label",
      "options": [
        {
          "value": "container",
          "label": "t:sections.main_slider.settings.width.options.boxed"
        },
        {
          "value": "container-full",
          "label": "t:sections.main_slider.settings.width.options.full_width"
        }
      ],
      "default": "container"
    },
    {
      "type": "select",
      "id": "height",
      "label": "t:sections.main_slider.settings.height.label",
      "options": [
        {
          "value": "adapt-first",
          "label": "t:sections.main_slider.settings.height.options.adapt_first"
        },
        {
          "value": "fill",
          "label": "t:sections.main_slider.settings.height.options.fill"
        },
        {
          "value": "fixed",
          "label": "t:sections.main_slider.settings.height.options.fixed"
        }
      ],
      "default": "adapt-first"
    },
    {
      "type": "range",
      "id": "height_fixed",
      "label": "t:sections.main_slider.settings.height_fixed.label",
      "min": 100,
      "max": 1000,
      "step": 10,
      "unit": "px",
      "default": 500,
      "visible_if": "{{section.settings.height == 'fixed'}}"
    },
    {
      "type": "select",
      "id": "mobile_height",
      "label": "t:sections.main_slider.settings.mobile_height.label",
      "options": [
        {
          "value": "adapt-first",
          "label": "t:sections.main_slider.settings.mobile_height.options.adapt"
        },
        {
          "value": "fill",
          "label": "t:sections.main_slider.settings.mobile_height.options.fill"
        },
        {
          "value": "fixed",
          "label": "t:sections.main_slider.settings.mobile_height.options.fixed"
        }
      ],
      "default": "adapt-first"
    },
    {
      "type": "range",
      "id": "mobile_height_fixed",
      "label": "t:sections.main_slider.settings.mobile_height_fixed.label",
      "min": 100,
      "max": 800,
      "step": 10,
      "unit": "px",
      "default": 300,
      "visible_if": "{{section.settings.mobile_height == 'fixed'}}"
    },
    {
      "type": "header",
      "content": "t:sections.main_slider.settings.slider_settings.content"
    },
    {
      "type": "checkbox",
      "id": "loop",
      "label": "t:sections.main_slider.settings.loop.label",
      "default": true
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "label": "t:sections.main_slider.settings.autoplay_speed.label",
      "min": 0,
      "max": 10,
      "step": 0.5,
      "default": 5,
      "info": "t:sections.main_slider.settings.autoplay_speed.info"
    },
    {
      "type": "checkbox",
      "id": "pause_on_hover",
      "label": "t:sections.main_slider.settings.pause_on_hover.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "draggable",
      "label": "t:sections.main_slider.settings.draggable.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "t:sections.main_slider.settings.show_arrows.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_arrows_mobile",
      "label": "t:sections.main_slider.settings.show_arrows_mobile.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "t:sections.main_slider.settings.show_dots.label",
      "default": true
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_mobile_rate",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "%",
      "label": "t:sections.top_bar.settings.padding_mobile_rate.label",
      "default": 75,
      "info": "t:sections.top_bar.settings.padding_mobile_rate.info"
    }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "t:sections.main_slider.blocks.slide.name",
      "limit": 5,
      "settings": [
        {
          "type": "color_scheme",
          "id": "color_scheme",
          "label": "t:sections.all.colors.label"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:sections.main_slider.blocks.slide.settings.image.label"
        },
        {
          "type": "image_picker",
          "id": "mobile_image",
          "label": "t:sections.main_slider.blocks.slide.settings.mobile_image.label",
          "info": "t:sections.main_slider.blocks.slide.settings.mobile_image.info"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "t:sections.main_slider.blocks.slide.settings.heading.label",
          "default": "t:sections.main_slider.blocks.slide.settings.heading.default"
        },
        {
          "type": "select",
          "id": "heading_size",
          "label": "t:sections.main_slider.blocks.slide.settings.heading_size.label",
          "options": [
            {
              "value": "display-sm",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_size.options.small"
            },
            {
              "value": "display-md",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_size.options.medium"
            },
            {
              "value": "display-lg",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_size.options.large"
            }
          ],
          "default": "display-md"
        },
        {
          "type": "select",
          "id": "heading_weight",
          "label": "t:sections.main_slider.blocks.slide.settings.heading_weight.label",
          "options": [
            {
              "value": "fw-normal",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_weight.options.normal"
            },
            {
              "value": "fw-medium",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_weight.options.medium"
            },
            {
              "value": "fw-semibold",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_weight.options.semi_bold"
            },
            {
              "value": "fw-bold",
              "label": "t:sections.main_slider.blocks.slide.settings.heading_weight.options.bold"
            }
          ],
          "default": "fw-medium"
        },
        {
          "type": "textarea",
          "id": "description",
          "label": "t:sections.main_slider.blocks.slide.settings.description.label",
          "default": "t:sections.main_slider.blocks.slide.settings.description.default"
        },
        {
          "type": "text",
          "id": "subheading",
          "label": "Subheading (Style 2)"
        },
        {
          "type": "text",
          "id": "box_bg_class",
          "label": "Box background class (Style 2)"
        },
        {
          "type": "select",
          "id": "content_alignment",
          "label": "t:sections.main_slider.blocks.slide.settings.content_alignment.label",
          "options": [
            {
              "value": "col-12 col-sm-6 col-lg-5",
              "label": "t:sections.main_slider.blocks.slide.settings.content_alignment.options.left"
            },
            {
              "value": "col-12 col-sm-8 col-lg-6 offset-sm-2 offset-lg-3",
              "label": "t:sections.main_slider.blocks.slide.settings.content_alignment.options.center"
            },
            {
              "value": "col-12 col-sm-6 col-lg-5 offset-sm-6 offset-lg-6",
              "label": "t:sections.main_slider.blocks.slide.settings.content_alignment.options.right"
            }
          ],
          "default": "col-12 col-sm-6 col-lg-5"
        },
        {
          "type": "radio",
          "id": "text_size",
          "label": "t:sections.main_slider.blocks.slide.settings.text_size.label",
          "options": [
            {
              "value": "text-sm",
              "label": "t:sections.main_slider.blocks.slide.settings.text_size.options.small"
            },
            {
              "value": "text-md",
              "label": "t:sections.main_slider.blocks.slide.settings.text_size.options.medium"
            },
            {
              "value": "text-lg",
              "label": "t:sections.main_slider.blocks.slide.settings.text_size.options.large"
            }
          ],
          "default": "text-md"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "t:sections.main_slider.blocks.slide.settings.button_link.label"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "t:sections.main_slider.blocks.slide.settings.button_text.label",
          "default": "t:sections.main_slider.blocks.slide.settings.button_text.default"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "t:sections.main_slider.presets.name",
      "category": "t:sections.main_slider.presets.category",
      "blocks": [
        {
          "type": "slide"
        },
        {
          "type": "slide"
        },
        {
          "type": "slide"
        }
      ]
    }
  ]
}
{% endschema %}

{% style %}
  .slider-height {
    {% if section.settings.height == 'fixed' %}
      height: {{ section.settings.height_fixed }}px;
    {% elsif section.settings.height == 'fill' %}
      height: 100vh;
    {% elsif section.settings.height == 'adapt-first' %}
      height: auto;
    {% endif %}
  }

  /* Override CSS constraints for adapt-first to use actual image heights */
  .slider-height[data-height="adapt-first"] .slider-wrap .image {
    height: auto !important;
  }

  .slider-height[data-height="adapt-first"] .slider-wrap img {
    height: auto !important;
    width: 100% !important;
    object-fit: contain !important;
  }

  .slider-height[data-height="adapt-first"] .swiper-slide {
    height: auto !important;
    min-height: auto !important;
    max-height: none !important;
  }

  .slider-height[data-height="adapt-first"] .slider-wrap {
    height: auto !important;
    min-height: auto !important;
    max-height: none !important;
  }

  /* Override Swiper's internal height management */
  .slider-height[data-height="adapt-first"] .swiper-wrapper {
    height: auto !important;
    align-items: stretch !important;
  }

  .slider-height[data-height="adapt-first"] .swiper {
    height: auto !important;
  }

  .slider-height[data-height="adapt-first"] .tf-sw-slideshow {
    height: auto !important;
  }

  @media (max-width: 767px) {
    .slider-height {
      {% if section.settings.mobile_height == 'fixed' %}
        height: {{ section.settings.mobile_height_fixed }}px;
      {% elsif section.settings.mobile_height == 'fill' %}
        height: 100vh;
      {% elsif section.settings.mobile_height == 'adapt-first' %}
        height: auto !important;
      {% endif %}
    }

    /* Mobile-specific fill and fixed height styles to eliminate blank space */
    .slider-height[data-mobile-height="fill"] .slider-wrap,
    .slider-height[data-mobile-height="fixed"] .slider-wrap {
      height: 100% !important;
      display: flex !important;
      flex-direction: column !important;
    }

    .slider-height[data-mobile-height="fill"] .slider-wrap .image,
    .slider-height[data-mobile-height="fixed"] .slider-wrap .image {
      flex: 1 !important;
      height: auto !important;
      min-height: 0 !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
    }

    .slider-height[data-mobile-height="fill"] .slider-wrap img,
    .slider-height[data-mobile-height="fixed"] .slider-wrap img {
      width: 100% !important;
      height: 100% !important;
      object-fit: cover !important;
      object-position: center !important;
    }

    /* Mobile-specific adapt-first styles - more aggressive overrides */
    .slider-height[data-height="adapt-first"] .slider-wrap .image,
    .slider-height[data-mobile-height="adapt-first"] .slider-wrap .image {
      height: auto !important;
    }

    .slider-height[data-height="adapt-first"] .slider-wrap img,
    .slider-height[data-mobile-height="adapt-first"] .slider-wrap img {
      height: auto !important;
      width: 100% !important;
      object-fit: contain !important;
    }

    .slider-height[data-height="adapt-first"] .swiper-slide,
    .slider-height[data-mobile-height="adapt-first"] .swiper-slide {
      height: auto !important;
      min-height: auto !important;
      max-height: none !important;
    }

    .slider-height[data-height="adapt-first"] .slider-wrap,
    .slider-height[data-mobile-height="adapt-first"] .slider-wrap {
      height: auto !important;
      min-height: auto !important;
      max-height: none !important;
    }

    .slider-height[data-height="adapt-first"] .swiper-wrapper,
    .slider-height[data-mobile-height="adapt-first"] .swiper-wrapper {
      height: auto !important;
      align-items: stretch !important;
    }

    .slider-height[data-height="adapt-first"] .swiper,
    .slider-height[data-mobile-height="adapt-first"] .swiper {
      height: auto !important;
    }

    .slider-height[data-height="adapt-first"] .tf-sw-slideshow,
    .slider-height[data-mobile-height="adapt-first"] .tf-sw-slideshow {
      height: auto !important;
    }

    /* Additional mobile-specific overrides to ensure height is respected */
    .slider-height[data-mobile-height="adapt-first"] {
      height: auto !important;
    }

    .slider-height[data-mobile-height="adapt-first"] * {
      box-sizing: border-box !important;
    }

    /* Force all slides to have the same height on mobile */
    .slider-height[data-mobile-height="adapt-first"] .swiper-slide {
      height: inherit !important;
      min-height: inherit !important;
      max-height: inherit !important;
    }

    .slider-height[data-mobile-height="adapt-first"] .slider-wrap {
      height: inherit !important;
      min-height: inherit !important;
      max-height: inherit !important;
    }


  }

  .section-{{ section.id }}-padding {
    padding-top: calc({{ section.settings.padding_top }}px * {{ section.settings.padding_mobile_rate | divided_by: 100.0 }});
    padding-bottom: calc({{ section.settings.padding_bottom }}px * {{ section.settings.padding_mobile_rate | divided_by: 100.0 }});
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{% endstyle %}

<section class="tf-slideshow {% if section.settings.layout_style == 'style-2' %}slider-viewport slider-style-2{% else %}slider-electric-access slider-default{% endif %} color-{{ section.settings.color_scheme }} gradient section-{{ section.id }}-padding">
  <div class="{{ section.settings.width }}">
    <div class="row">
      <div class="col-lg-12">
        <div
          class="swiper tf-sw-slideshow slider-effect-fade slider-height"
          data-slider-id="{{ section.id }}"
          data-height="{{ section.settings.height }}"
          data-mobile-height="{{ section.settings.mobile_height }}"
          data-preview="1"
          data-tablet="1"
          data-mobile="1"
          data-centered="false"
          data-space="0"
          data-space-mb="0"
          data-loop="{{ section.settings.loop }}"
          {% assign autoplay_ms = section.settings.autoplay_speed | times: 1000 %}
          data-auto-play="{% if autoplay_ms > 0 %}true{% else %}false{% endif %}"
          data-delay="{{ autoplay_ms }}"
          data-simulate-touch="{{ section.settings.draggable }}"
          data-pause-on-hover="{{ section.settings.pause_on_hover }}"
        >
          <div class="swiper-wrapper">
            {% for block in section.blocks %}
              {% if block.type == 'slide' %}
                <div
                  class="swiper-slide color-{{ block.settings.color_scheme | default: section.settings.color_scheme }} gradient"
                  {{ block.shopify_attributes }}
                >
                  {% if section.settings.layout_style == 'style-2' %}
                    <div class="slider-wrap">
                      <div class="box-content-left {{ block.settings.box_bg_class }}">
                        <div class="container">
                          <div class="content-slider text-center">
                            <div class="box-title-slider">
                              {% if block.settings.subheading != '' %}
                                <p class="sub text-md fade-item fade-item-1 font-13 text-uppercase fw-semibold">
                                  {{ block.settings.subheading }}
                                </p>
                              {% endif %}
                              <h2 class="heading letter-0 fade-item fade-item-2 font-14 {{ block.settings.heading_weight }}">
                                {{ block.settings.heading }}
                              </h2>
                              {% if block.settings.description != '' %}
                                <p class="sub text-md fade-item fade-item-3 font-13 text-main">
                                  {{ block.settings.description }}
                                </p>
                              {% endif %}
                            </div>
                            {% if block.settings.button_link %}
                              <div class="box-btn-slider fade-item fade-item-3">
                                <a href="{{ block.settings.button_link }}" class="tf-btn fw-normal animate-btn font-13 border-0">
                                  {{ block.settings.button_text }}
                                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M22.354 11.6459C22.4006 11.6923 22.4375 11.7475 22.4627 11.8083C22.4879 11.869 22.5009 11.9341 22.5009 11.9999C22.5009 12.0657 22.4879 12.1308 22.4627 12.1915C22.4375 12.2523 22.4006 12.3075 22.354 12.3539L18.354 16.3539C18.3075 16.4004 18.2523 16.4373 18.1916 16.4624C18.1308 16.4876 18.0657 16.5005 18 16.5005C17.8672 16.5005 17.7399 16.4478 17.646 16.3539C17.5521 16.26 17.4994 16.1327 17.4994 15.9999C17.4994 15.8671 17.5521 15.7398 17.646 15.6459L20.793 12.4999H2C1.86739 12.4999 1.74021 12.4472 1.64645 12.3535C1.55268 12.2597 1.5 12.1325 1.5 11.9999C1.5 11.8673 1.55268 11.7401 1.64645 11.6463C1.74021 11.5526 1.86739 11.4999 2 11.4999H20.793L17.646 8.3539C17.5521 8.26001 17.4994 8.13268 17.4994 7.9999C17.4994 7.86712 17.5521 7.73979 17.646 7.6459C17.7399 7.55201 17.8672 7.49927 18 7.49927C18.1328 7.49927 18.2601 7.55201 18.354 7.6459L22.354 11.6459Z" fill="white"></path>
                                  </svg>
                                </a>
                              </div>
                            {% endif %}
                          </div>
                        </div>
                      </div>
                      <div class="image">
                        {% if block.settings.image %}
                          {% assign image_class = '' %}
                          {% if section.settings.height == 'fill' or section.settings.height == 'fixed' or section.settings.mobile_height == 'fill' %}
                            {% assign image_class = image_class | append: ' w-100 h-100 object-fit-cover' %}
                          {% endif %}
                          {% assign desktop_image_class = image_class | append: ' d-none d-md-block' %}
                          {% assign mobile_image_class = image_class | append: ' d-md-none' %}
                          {% if forloop.first %}
                            <img class="{{ desktop_image_class }}" src="{{ block.settings.image | image_url: width: 1920 }}" alt="{{ block.settings.heading }}" width="1920" height="1080" fetchpriority="high" loading="eager" decoding="sync">
                            {% if block.settings.mobile_image %}
                              <img class="{{ mobile_image_class }}" src="{{ block.settings.mobile_image | image_url: width: 767 }}" alt="{{ block.settings.heading }}" width="767" height="400" loading="eager" decoding="sync">
                            {% else %}
                              <img class="{{ mobile_image_class }}" src="{{ block.settings.image | image_url: width: 767 }}" alt="{{ block.settings.heading }}" width="767" height="400" loading="eager" decoding="sync">
                            {% endif %}
                          {% else %}
                            {{ block.settings.image | image_url: width: 1920 | image_tag: class: desktop_image_class, alt: block.settings.heading, loading: 'lazy', decoding: 'async' }}
                            {% if block.settings.mobile_image %}
                              {{ block.settings.mobile_image | image_url: width: 767 | image_tag: class: mobile_image_class, alt: block.settings.heading, loading: 'lazy', decoding: 'async' }}
                            {% else %}
                              {{ block.settings.image | image_url: width: 767 | image_tag: class: mobile_image_class, alt: block.settings.heading, loading: 'lazy', decoding: 'async' }}
                            {% endif %}
                          {% endif %}
                        {% endif %}
                      </div>
                    </div>
                  {% else %}
                    <div class="slider-wrap">
                      <div class="image">
                        {% if block.settings.image %}
                          {% assign image_class = '' %}
                          {% if section.settings.height == 'fill' or section.settings.height == 'fixed' or section.settings.mobile_height == 'fill' %}
                            {% assign image_class = image_class | append: ' w-100 h-100 object-fit-cover' %}
                          {% endif %}

                          {% assign desktop_image_class = image_class | append: ' d-none d-md-block' %}
                          {% assign mobile_image_class = image_class | append: ' d-md-none' %}

                          {% comment %} Only ONE image gets high priority for LCP, others get lazy loading {% endcomment %}
                          {% if forloop.first %}
                            {% comment %} ONLY LCP image loads immediately with high quality {% endcomment %}
                            <img
                              class="{{ desktop_image_class }}"
                              src="{{ block.settings.image | image_url: width: 1920 }}"
                              alt="{{ block.settings.heading }}"
                              width="1920"
                              height="1080"
                              fetchpriority="high"
                              loading="eager"
                              decoding="sync"
                            >

                            {% comment %} Mobile image loads immediately for first slide {% endcomment %}
                            {% if block.settings.mobile_image %}
                              <img
                                class="{{ mobile_image_class }}"
                                src="{{ block.settings.mobile_image | image_url: width: 767 }}"
                                alt="{{ block.settings.heading }}"
                                width="767"
                                height="400"
                                loading="eager"
                                decoding="sync"
                              >
                            {% else %}
                              <img
                                class="{{ mobile_image_class }}"
                                src="{{ block.settings.image | image_url: width: 767 }}"
                                alt="{{ block.settings.heading }}"
                                width="767"
                                height="400"
                                loading="eager"
                                decoding="sync"
                              >
                            {% endif %}
                          {% else %}
                            {{
                              block.settings.image
                              | image_url: width: 1920
                              | image_tag:
                                class: desktop_image_class,
                                alt: block.settings.heading,
                                loading: 'lazy',
                                decoding: 'async'
                            }}

                            {% if block.settings.mobile_image %}
                              {{
                                block.settings.mobile_image
                                | image_url: width: 767
                                | image_tag:
                                  class: mobile_image_class,
                                  alt: block.settings.heading,
                                  loading: 'lazy',
                                  decoding: 'async'
                              }}
                            {% else %}
                              {{
                                block.settings.image
                                | image_url: width: 767
                                | image_tag:
                                  class: mobile_image_class,
                                  alt: block.settings.heading,
                                  loading: 'lazy',
                                  decoding: 'async'
                              }}
                            {% endif %}
                          {% endif %}
                        {% endif %}
                      </div>
                      <div class="box-content">
                        <div class="container">
                          <div class="row">
                            <div class="{{ block.settings.content_alignment }}">
                              <div class="content-slider">
                                <div class="box-title-slider">
                                  <h4 class="heading {{ block.settings.heading_size }} {{ block.settings.heading_weight }} fade-item fade-item-1">
                                    {{ block.settings.heading }}
                                  </h4>
                                  <p
                                    class="sub {{ block.settings.text_size }} fade-item fade-item-2"
                                    style="color: rgb(var(--color-foreground2));"
                                  >
                                    {{ block.settings.description }}
                                  </p>
                                </div>
                                {% if block.settings.button_link %}
                                  <div class="box-btn-slider fade-item fade-item-3">
                                    <a
                                      href="{{ block.settings.button_link }}"
                                      class="tf-btn animate-btn"
                                    >
                                      {{ block.settings.button_text }}
                                    </a>
                                  </div>
                                {% endif %}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  {% endif %}
                </div>
              {% endif %}
            {% endfor %}
          </div>
          {% if section.settings.show_arrows or section.settings.show_arrows_mobile %}
            <div
              class="navigation-next-slider swiper-button-next {% unless section.settings.show_arrows_mobile %}d-none d-md-block{% endunless %} {% unless section.settings.show_arrows %}d-block d-md-none{% endunless %}"
            ></div>
            <div
              class="navigation-prev-slider swiper-button-prev {% unless section.settings.show_arrows_mobile %}d-none d-md-block{% endunless %} {% unless section.settings.show_arrows %}d-block d-md-none{% endunless %}"
            ></div>
          {% endif %}

          {% if section.settings.show_dots %}
            <div class="wrap-pagination">
              <div class="container">
                <div class="sw-dots style-dark sw-pagination-slider justify-content-center"></div>
              </div>
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const slider = document.querySelector('[data-slider-id="{{ section.id }}"]');
    if (!slider) return;

    const heightSetting = slider.getAttribute('data-height');
    const mobileHeightSetting = slider.getAttribute('data-mobile-height');

    // Handle adapt-first height option for both desktop and mobile
    if (heightSetting === 'adapt-first' || mobileHeightSetting === 'adapt-first') {
      const slides = slider.querySelectorAll('.swiper-slide');
      let isAdjusting = false;
      let lastHeight = 0;
      let lastMobileHeight = 0;

      // Function to adjust slide heights
      function adjustSlideHeights() {
        if (isAdjusting) return; // Prevent multiple simultaneous executions

        isAdjusting = true;

        // Check if we should use adapt-first for current viewport
        const isMobile = window.innerWidth <= 767;
        const shouldUseAdaptFirst =
          (isMobile && mobileHeightSetting === 'adapt-first') || (!isMobile && heightSetting === 'adapt-first');

        // Skip height adjustment if mobile is set to 'fill' (let CSS handle it)
        if (isMobile && mobileHeightSetting === 'fill') {
          return;
        }

        if (shouldUseAdaptFirst) {
          // For adapt-first: ALWAYS use the first slide to determine height
          const firstSlide = slides[0];
          if (firstSlide) {
            const firstContent = firstSlide.querySelector('.slider-wrap');
            if (firstContent) {
              // Get the first slide's actual image height instead of container height
              const image = firstContent.querySelector('.image img');
              let firstHeight = 0;

              if (image) {
                // Check if image has loaded and has valid dimensions
                if (image.complete && image.naturalWidth > 0 && image.naturalHeight > 0) {
                  // Use the actual image height when scaled to container width
                  const containerWidth = firstContent.offsetWidth;
                  const naturalWidth = image.naturalWidth;
                  const naturalHeight = image.naturalHeight;

                  // Calculate the scaled height while maintaining aspect ratio
                  firstHeight = Math.round((containerWidth * naturalHeight) / naturalWidth);
                } else {
                  // Image not fully loaded, use container height as fallback
                  firstHeight = Math.round(firstContent.getBoundingClientRect().height);
                }
              } else {
                // Fallback to container height if no image found
                firstHeight = Math.round(firstContent.getBoundingClientRect().height);
              }

              // Ensure minimum height and check if height is reasonable
              const minHeight = isMobile ? 50 : 50; // Minimum heights for mobile/desktop
              if (firstHeight < minHeight) {
                firstHeight = minHeight;
              }

              // Only apply if height is reasonable and different from last height
              const currentLastHeight = isMobile ? lastMobileHeight : lastHeight;

              if (firstHeight >= minHeight && firstHeight !== currentLastHeight) {
                if (isMobile) {
                  lastMobileHeight = firstHeight;
                } else {
                  lastHeight = firstHeight;
                }

                // Apply the first slide height to ALL slides
                slides.forEach((slide, index) => {
                  const content = slide.querySelector('.slider-wrap');
                  if (content) {
                    // Force the height with !important equivalent
                    slide.style.setProperty('height', firstHeight + 'px', 'important');
                    content.style.setProperty('height', firstHeight + 'px', 'important');

                    // Also set min-height and max-height to prevent Swiper from overriding
                    slide.style.setProperty('min-height', firstHeight + 'px', 'important');
                    slide.style.setProperty('max-height', firstHeight + 'px', 'important');
                    content.style.setProperty('min-height', firstHeight + 'px', 'important');
                    content.style.setProperty('max-height', firstHeight + 'px', 'important');
                  }
                });

                // Force Swiper to recalculate and respect our heights
                if (window.Swiper && slider.swiper) {
                  setTimeout(() => {
                    slider.swiper.update();
                    slider.swiper.updateSize();
                    slider.swiper.updateSlides();
                  }, 100);
                }
              } else {
              }
            }
          }
        }

        // Reset flag after a short delay
        setTimeout(() => {
          isAdjusting = false;
        }, 100);
      }

      // Initial adjustment - wait a bit for content to settle
      setTimeout(adjustSlideHeights, 100);

      // Adjust on window resize
      let resizeTimer;
      window.addEventListener('resize', function () {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(adjustSlideHeights, 250);
      });

      // Adjust when images are loaded
      const images = slider.querySelectorAll('img');
      let loadedImages = 0;

      images.forEach((img) => {
        if (img.complete) {
          loadedImages++;
          if (loadedImages === images.length) {
            setTimeout(adjustSlideHeights, 100);
          }
        } else {
          img.addEventListener('load', function () {
            loadedImages++;
            if (loadedImages === images.length) {
              setTimeout(adjustSlideHeights, 100);
            }
          });
        }
      });

      // Final height adjustment after everything is settled
      // This ensures we get the final, stable height
      setTimeout(() => {
        adjustSlideHeights();
      }, 500);

      // Additional check after fonts and CSS are fully loaded
      if (document.readyState === 'complete') {
        setTimeout(() => {
          adjustSlideHeights();
        }, 1000);
      } else {
        window.addEventListener('load', () => {
          setTimeout(() => {
            adjustSlideHeights();
          }, 1000);
        });
      }
    }

    // Handle fill and fixed height modes on mobile to eliminate blank space
    function handleMobileHeightModes() {
      const isMobile = window.innerWidth <= 767;
      if (!isMobile) return;

      if (mobileHeightSetting === 'fill' || mobileHeightSetting === 'fixed') {
        const slides = slider.querySelectorAll('.swiper-slide');

        slides.forEach((slide) => {
          const content = slide.querySelector('.slider-wrap');
          const imageContainer = slide.querySelector('.image');
          const textContent = slide.querySelector('.box-content');

          if (content && imageContainer && textContent) {
            // Ensure the image container takes up the full available space
            imageContainer.style.setProperty('flex', '1', 'important');
            imageContainer.style.setProperty('min-height', '0', 'important');

            // Position text content absolutely over the image
            textContent.style.setProperty('position', 'absolute', 'important');
            textContent.style.setProperty('top', '0', 'important');
            textContent.style.setProperty('left', '0', 'important');
            textContent.style.setProperty('right', '0', 'important');
            textContent.style.setProperty('bottom', '0', 'important');
            textContent.style.setProperty('z-index', '2', 'important');

            // Ensure images fill the container properly
            const images = imageContainer.querySelectorAll('img');
            images.forEach((img) => {
              img.style.setProperty('width', '100%', 'important');
              img.style.setProperty('height', '100%', 'important');
              img.style.setProperty('object-fit', 'cover', 'important');
              img.style.setProperty('object-position', 'center', 'important');
            });
          }
        });
      }
    }

    // Call mobile height handler
    handleMobileHeightModes();

    // Handle on resize
    window.addEventListener('resize', function () {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => {
        handleMobileHeightModes();
      }, 250);
    });
  });
</script>
